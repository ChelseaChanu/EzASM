package com.ezasm.assembler;

/**
 * Object to be executed by an {@link Assembler} instance that modifies the state of the instance in some way.
 */
public sealed interface Directive {
    /**
     * Called by an {@link Assembler} instance during assembly.
     * @param assembler the assembler that this Directive should act on.
     */
    void invoke(Assembler assembler);

    /**
     * The priority of a Directive determines when it is invoked by an {@link Assembler} instance.
     * All priority 0 Directives are invoked first, followed by all priority 1 Directives, and so on until all Directives have been invoked.
     * @return the priority value of this Directive.
     */
    int priority();

    /**
     * Used by the assembler to pre-calculate Directive sizes and section offsets.
     * @return The size, in bytes, of the data generated by this Directive.
     */
    int size();

    /**
     * A basic Directive implementation that writes an array of bytes to the current section of an {@link Assembler} instance.
     * @param data the data to write.
     */
    record Write(byte[] data) implements Directive {
        @Override
        public void invoke(Assembler assembler) {
            assembler.writeData(data);
        }

        @Override
        public int priority() {
            return 1;
        }

        @Override
        public int size() {
            return data.length;
        }
    }

    /**
     * A basic Directive implementation that sets the current section of an {@link Assembler} instance.
     * If no section with the provided name exists, a new section is created.
     * @param section the name of the section.
     */
    record SetSection(String section) implements Directive {
        @Override
        public void invoke(Assembler assembler) {
            assembler.setSection(section);
        }

        @Override
        public int priority() {
            return 0;
        }

        @Override
        public int size() {
            return 0;
        }
    }

    /**
     * A basic Directive implementation that creates a label in at the current section offset of an {@link Assembler} instance.
     * @param id the name of the label.
     */
    record CreateLabel(String id) implements Directive {
        @Override
        public void invoke(Assembler assembler) {
            assembler.addLabel(id);
        }

        @Override
        public int priority() {
            return 0;
        }

        @Override
        public int size() {
            return 0;
        }
    }

    /**
     * A Directive that writes a MIPS instruction in the current section of an {@link Assembler} instance using the MIPS Register encoding.
     * @param function the MIPS function number.
     * @param sourceLeft the left source register number. This may not actually be on the left depending on the instruction.
     * @param sourceRight the right source register number. This may not actually be on the right depending on the instruction.
     * @param dest the destination register number.
     * @param shift the shift amount for bit shift instructions. This value 0 for all other instructions.
     */
    record WriteRInstruction(byte function, byte sourceLeft, byte sourceRight, byte dest, byte shift) implements Directive {
        @Override
        public void invoke(Assembler assembler) {
            int instruction = (int)function | ((int)shift << 6) | ((int)dest << 11) | ((int)sourceRight << 16) | ((int)sourceLeft << 21);
            assembler.writeData(instruction);
        }

        @Override
        public int priority() {
            return 1;
        }

        @Override
        public int size() {
            return 4;
        }
    }

    /**
     * A Directive that writes a MIPS instruction in the current section of an {@link Assembler} instance using the MIPS Immediate encoding.
     * @param opcode the MIPS opcode number
     * @param first the first source register number. This may not actually be first depending on the instruction.
     * @param second the second source register number. This may not actually be second depending on the instruction.
     * @param immediate the immediate value to be encoded.
     */
    record WriteIInstruction(byte opcode, byte first, byte second, char immediate) implements Directive {
        @Override
        public void invoke(Assembler assembler) {
            int instruction = (int)immediate | ((int)second << 16) | ((int)first << 21) | ((int)opcode << 26);
            assembler.writeData(instruction);
        }

        @Override
        public int priority() {
            return 1;
        }

        @Override
        public int size() {
            return 4;
        }
    }

    /**
     * A Directive that writes a MIPS instruction in the current section of an {@link Assembler} instance using the MIPS Jump encoding.
     * @param opcode the MIPS opcode number
     * @param label the label value to be encoded.
     */
    record WriteJInstruction(byte opcode, String label) implements Directive {
        @Override
        public void invoke(Assembler assembler) {
            long immediate = assembler.getLabel(label);
            int instruction = (int)(immediate >> 2) | ((int)opcode << 26);
            assembler.writeData(instruction);
            assembler.writeData(0);
        }

        @Override
        public int priority() {
            return 1;
        }

        @Override
        public int size() {
            return 8;
        }
    }

    record WriteBranchInstruction(byte opcode, byte first, byte second, String label) implements Directive {
        @Override
        public void invoke(Assembler assembler) {
            long immediate = assembler.getLabelOffset(label);
            int instruction = (int)(immediate >> 2) | ((int)second << 16) | ((int)first << 21) | ((int)opcode << 26);
            assembler.writeData(instruction);
            assembler.writeData(0);
        }

        @Override
        public int priority() {
            return 1;
        }

        @Override
        public int size() {
            return 8;
        }
    }
}
